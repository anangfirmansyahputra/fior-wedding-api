// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  username String @unique
  password String
  role_id  String

  access_token  String? @db.Text
  refresh_token String? @db.Text

  role     Role       @relation(fields: [role_id], references: [id])
  customer Customer[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Role {
  id   String @id @default(uuid())
  name String @unique

  user        User[]
  permissions String[]
  // role_permissions RolePermission[]

  @@map("roles")
}

model Customer {
  id      String @id @default(uuid())
  user_id String

  user             User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  customer_biodata CustomerBiodata[]
  event            Event[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("customers")
}

model CustomerBiodata {
  id           String    @id @default(uuid())
  first_name   String
  last_name    String?
  email        String
  phone_number String
  address      String
  gender       Gender
  birthday     DateTime?

  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  customer_id String

  @@map("customer_biodatas")
}

model VendorCategory {
  id          Int    @id
  name        String
  status      String
  slug        String
  description String @db.Text
  imageUrl    String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("vendor_categories")
}

model Vendor {
  id           Int           @id
  data         Json
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  name         String
  category     String
  city         String
  event_vendor EventVendor[]

  @@map("vendors")
}

model Cities {
  id         Int    @id
  country_id Int
  name       String
  slug       String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("cities")
}

model Event {
  id String @id @default(uuid())

  customer_id    String
  client_name    String
  estimate_guest Int

  guest_arrival   DateTime
  guest_departure DateTime
  venue_name      String
  venue_address   String   @db.Text
  archive         Boolean  @default(false)

  // status EventStatus @default(SCHEDULED)

  customer            Customer            @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  event_vendor        EventVendor[]
  event_payment       EventPayment[]
  event_tasK_timeline EventTaskTimeline[]
  checklist_support   ChecklistSupport[]
  checklist_holmat    ChecklistHolmat[]
  event_budget        EventBudget[]
  event_rundown       EventRundown[]
  event_guest_seat    EventGuestSeat[]
  event_room_list     EventRoomList[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("events")
}

model EventVendor {
  id String @id @default(uuid())

  event_id String
  event    Event  @relation(fields: [event_id], references: [id], onDelete: Cascade)

  vendor_id Int
  vendor    Vendor @relation(fields: [vendor_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("event_vendors")
}

model EventPayment {
  id String @id @default(uuid())

  event_id       String
  event          Event         @relation(fields: [event_id], references: [id], onDelete: Cascade)
  amount         Float
  payment_method PaymentMethod
  payment_status PaymentStatus @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("event_payments")
}

model EventTaskTimeline {
  id String @id @default(uuid())

  event_id    String
  event       Event   @relation(fields: [event_id], references: [id], onDelete: Cascade)
  description String? @db.Text
  status      Status  @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("event_task_timelines")
}

model ChecklistSupport {
  id String @id @default(uuid())

  event_id            String
  event               Event      @relation(fields: [event_id], references: [id], onDelete: Cascade)
  support_name        String
  support_description String?    @db.Text
  support_status      ItemStatus @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("checklist_supports")
}

model ChecklistHolmat {
  id String @id @default(uuid())

  event_id      String
  event         Event      @relation(fields: [event_id], references: [id], onDelete: Cascade)
  holmat_name   String
  holmat_status ItemStatus @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("checklist_holmats")
}

model EventBudget {
  id String @id @default(uuid())

  event_id    String
  event       Event      @relation(fields: [event_id], references: [id], onDelete: Cascade)
  item_name   String
  item_amount Int
  item_status ItemStatus @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("event_budgets")
}

model EventRundown {
  id String @id @default(uuid())

  event_id      String
  event         Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  activity_name String
  start_time    DateTime
  end_time      DateTime
  location      String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("event_rundowns")
}

model EventGuestSeat {
  id String @id @default(uuid())

  event_id      String
  event         Event        @relation(fields: [event_id], references: [id], onDelete: Cascade)
  guest_name    String
  seat_number   String?
  seat_category SeatCategory

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("event_guest_seats")
}

model EventRoomList {
  id String @id @default(uuid())

  event_id      String
  event         Event  @relation(fields: [event_id], references: [id], onDelete: Cascade)
  room_name     String
  room_capacity Int?
  room_location String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("event_room_lists")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EventStatus {
  SCHEDULED
  ONGOING
  COMPLETED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum SeatCategory {
  VIP
  REGULAR
  SPECIAL
}

enum ItemStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Roles {
  ADMIN
  CUSTOMER
}
