// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Done
model User {
  id       String @id @default(uuid())
  name     String
  username String @unique
  password String
  role_id  String

  access_token  String? @db.Text
  refresh_token String? @db.Text

  role Role @relation(fields: [role_id], references: [id])

  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  vendor_notes        VendorNote[]
  event_collaborators EventCollaborator[]

  @@map("users")
}

// Done
model EventCollaborator {
  id       String @id @default(uuid())
  event_id String
  user_id  String

  event      Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("event_collaborators")
}

// Done
model Role {
  id   String @id @default(uuid())
  name String @unique

  user        User[]
  permissions RolePermission[]

  @@map("roles")
}

// Done
model RolePermission {
  id            String @id @default(uuid())
  role_id       String
  permission_id String

  role       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permission_id], references: [id])

  @@map("role_permissions")
}

// Done
model Permission {
  id        String @id @default(uuid())
  name      String
  name_code String @unique

  role_permissions RolePermission[]

  @@map("permissions")
}

// Done
model Customer {
  id String @id @default(uuid())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("customers")
}

model VendorCategory {
  id          Int    @id
  name        String
  status      String
  slug        String
  description String @db.Text
  imageUrl    String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("vendor_categories")
}

// ERD
model Vendor {
  id           Int           @id @default(autoincrement())
  data         Json
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  name         String
  category     String
  city         String
  event_vendor EventVendor[]
  note         VendorNote[]

  @@map("vendors")
}

// Done
model Event {
  id String @id @default(uuid())

  client_name    String
  estimate_guest Int

  guest_arrival   DateTime
  guest_departure DateTime
  venue_name      String
  venue_address   String   @db.Text
  archive         Boolean  @default(false)

  event_vendor EventVendor[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  event_collaboratos EventCollaborator[]
  event_biodatas     EventBiodata[]
  event_guestlist    EventGuestList[]
  event_rundowns     EventRundown[]

  @@map("events")
}

// Done
model EventBiodata {
  id                      String           @id @default(uuid())
  event_id                String
  type                    EventBiodataType
  mempelai_notes          String?          @db.Text
  mempelai_pic            String?
  mempelai_contact_number String?
  teapai_bride_name       String?
  teapai_bride_side       String?
  teapai_bride_note       String?          @db.Text
  teapai_groom_name       String?
  teapai_groom_side       String?
  teapai_groom_note       String?          @db.Text
  makeup_name             String?
  makeup_mua              String?
  makeup_teamnr           String?
  makeup_retouch          String?
  makeup_room             String?
  makeup_note             String?          @db.Text
  corsages_name           String?
  corsages_note           String?          @db.Text
  transport_name          String?
  transport_driver        String?
  transport_vehicle       String?
  transport_platenr       String?
  transport_notes         String?          @db.Text
  event_layout            String?
  foto_groom              String?
  foto_groom_note         String?          @db.Text
  foto_bride              String?
  foto_bride_note         String?          @db.Text
  foto_penjemputan        String?
  foto_penjemputan_note   String?          @db.Text
  order_nr                Int?

  event      Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("event_biodatas")
}

// Done
model EventRundown {
  id                     String   @id @default(uuid())
  event_id               String
  rundown_name           String
  rundown_date           DateTime
  rundown_start_datetime DateTime
  rundown_end_datetime   DateTime
  rundown_notes          String
  rundown_location       String

  event      Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("event_rundowns")
}

// Done
model EventGuestList {
  id            String   @id @default(uuid())
  event_id      String
  name          String
  total_pax     String
  no_hp         String
  status        String
  adult         String
  children      String
  food_notes    String   @db.Text
  hotel         String
  room_type     String
  check_in_date DateTime
  checkout      DateTime
  night         String
  extra_bed     String
  transport     String
  notes         String   @db.Text
  amount        Int
  total_amount  Int

  event      Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("event_guestlists")
}

// ERD
model EventVendor {
  id String @id @default(uuid())

  event_id String
  event    Event  @relation(fields: [event_id], references: [id], onDelete: Cascade)

  vendor_id Int
  vendor    Vendor @relation(fields: [vendor_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("event_vendors")
}

model VendorNote {
  id String @id @default(uuid())

  user_id   String
  vendor_id Int
  note      String @db.Text

  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  vendor Vendor @relation(fields: [vendor_id], references: [id], onDelete: Cascade)

  @@map("vendor_notes")
}

enum EventBiodataType {
  data_mempelai
  list_teapai
  list_corsages
  list_makeup
  list_transport
  list_foto
  event_layout
}
